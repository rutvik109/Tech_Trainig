{"ast":null,"code":"// import { FormGroup, FormControl } from '@angular/forms';\n// import { FormGroup } from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { forbiddenNameValidator } from './shared/user-name.validator';\nimport { PasswordValidator } from './shared/password.validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./registration.service\";\nimport * as i3 from \"@angular/common\";\nfunction AppComponent_div_18_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"UserName is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_div_18_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" UserName must be at least 3 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_div_18_small_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.UserName.errors == null ? null : ctx_r5.UserName.errors[\"forbiddenName\"].value, \" UserName is not allowed \");\n  }\n}\nfunction AppComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtemplate(1, AppComponent_div_18_small_1_Template, 2, 0, \"small\", 27);\n    i0.ɵɵtemplate(2, AppComponent_div_18_small_2_Template, 2, 0, \"small\", 27);\n    i0.ɵɵtemplate(3, AppComponent_div_18_small_3_Template, 2, 1, \"small\", 27);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.UserName.errors == null ? null : ctx_r0.UserName.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.UserName.errors == null ? null : ctx_r0.UserName.errors[\"minlength\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.UserName.errors == null ? null : ctx_r0.UserName.errors[\"forbiddenName\"]);\n  }\n}\nfunction AppComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵelement(1, \"input\", 29);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r7 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", i_r7);\n  }\n}\nfunction AppComponent_small_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 11);\n    i0.ɵɵtext(1, \"Password do not match\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class AppComponent {\n  constructor(fb, _registrationService) {\n    this.fb = fb;\n    this._registrationService = _registrationService;\n  }\n  get UserName() {\n    return this.registrationForm.controls['userName'];\n  }\n  get Email() {\n    return this.registrationForm.controls['email'];\n  }\n  get alterEmails() {\n    return this.registrationForm.controls['alternateEmails'];\n  }\n  addAlternateEmail() {\n    this.alterEmails.push(this.fb.control(''));\n  }\n  ngOnInit() {\n    this.registrationForm = this.fb.group({\n      userName: [\"\", [Validators.required, Validators.minLength(3), forbiddenNameValidator(/admin/)]],\n      email: \"\",\n      subscribe: [false],\n      password: [\"\"],\n      confirmPassword: [\"\"],\n      address: this.fb.group({\n        city: [\"\"],\n        state: [\"\"],\n        postCode: [\"\"]\n      }),\n      alternateEmails: this.fb.array([])\n    }, {\n      validator: PasswordValidator\n    });\n    this.registrationForm.controls['subscribe'].valueChanges.subscribe(checkedValue => {\n      const email = this.registrationForm.controls['email'];\n      if (checkedValue) {\n        email.setValidators(Validators.required);\n      } else {\n        email.clearValidators();\n      }\n      email.updateValueAndValidity();\n    });\n  }\n  //     registrationForm = new FormGroup(\n  //       {\n  //         userName: new FormControl(\"\"),\n  //         password: new FormControl(\"\"),\n  //         confirmPassword: new FormControl(\"\"),\n  //         address: new FormGroup({\n  //           city: new FormControl(\"\"),\n  //           state: new FormControl(\"\"),\n  //           postCode: new FormControl(\"\")\n  //         })\n  //       }\n  //     )\n  OnLoad() {\n    this.registrationForm.setValue({\n      userName: \"rutvik\",\n      email: \"\",\n      subscribe: [false],\n      password: \"test\",\n      confirmPassword: \"test\",\n      address: {\n        city: \"Ahmedabad\",\n        state: \"gujrat\",\n        postCode: \"380026\"\n      }\n    });\n  }\n  OnSubmit() {\n    this._registrationService.register(this.registrationForm.value).subscribe(response);\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.RegistrationService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 59,\n  vars: 15,\n  consts: [[\"lang\", \"en\"], [\"charset\", \"UTF-8\"], [\"http-equiv\", \"X-UA-Compatible\", \"content\", \"IE=edge\"], [\"name\", \"viewport\", \"content\", \"width=device-width, initial-scale=1.0\"], [1, \"container-fluid\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"formControlName\", \"userName\", \"type\", \"text\", 1, \"form-control\"], [\"class\", \"text-danger mb-3\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", \"m-2\", 3, \"click\"], [\"type\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [1, \"text-danger\"], [\"formArrayName\", \"alternateEmails\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-check\"], [1, \"form-check-label\"], [\"type\", \"checkbox\", \"formControlName\", \"subscribe\", 1, \"form-check-input\"], [1, \"form-group\", \"mb-3\"], [\"formControlName\", \"password\", \"type\", \"password\", 1, \"form-control\"], [\"formControlName\", \"confirmPassword\", \"type\", \"password\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"formGroupName\", \"address\", 1, \"mb-3\"], [\"formControlName\", \"city\", \"type\", \"text\", 1, \"form-control\"], [\"formControlName\", \"state\", \"type\", \"text\", 1, \"form-control\"], [\"formControlName\", \"postCode\", \"type\", \"text\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mb-3\"], [\"type\", \"button\", 1, \"btn\", \"btn-info\", 3, \"click\"], [1, \"text-danger\", \"mb-3\"], [4, \"ngIf\"], [\"formArrayName\", \"alternateEmails\"], [\"type\", \"email\", 1, \"form-control\", 3, \"formControlName\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"html\", 0)(1, \"head\");\n      i0.ɵɵelement(2, \"meta\", 1)(3, \"meta\", 2)(4, \"meta\", 3);\n      i0.ɵɵelementStart(5, \"title\");\n      i0.ɵɵtext(6, \"Document\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"body\")(8, \"div\", 4)(9, \"h2\");\n      i0.ɵɵtext(10, \"Registration Form\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"form\", 5);\n      i0.ɵɵlistener(\"ngSubmit\", function AppComponent_Template_form_ngSubmit_11_listener() {\n        return ctx.OnSubmit();\n      });\n      i0.ɵɵtext(12);\n      i0.ɵɵpipe(13, \"json\");\n      i0.ɵɵelementStart(14, \"div\", 6)(15, \"label\");\n      i0.ɵɵtext(16, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, AppComponent_div_18_Template, 4, 3, \"div\", 8);\n      i0.ɵɵelementStart(19, \"div\", 6)(20, \"label\");\n      i0.ɵɵtext(21, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_22_listener() {\n        return ctx.addAlternateEmail();\n      });\n      i0.ɵɵtext(23, \"Add e-mail\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(24, \"input\", 10);\n      i0.ɵɵelementStart(25, \"small\", 11);\n      i0.ɵɵtext(26, \"Please Enter Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(27, AppComponent_div_27_Template, 2, 1, \"div\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"div\", 13)(29, \"label\", 14);\n      i0.ɵɵtext(30, \" Send me promotional offers \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(31, \"input\", 15);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"div\", 16)(33, \"label\");\n      i0.ɵɵtext(34, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(35, \"input\", 17);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"div\", 16)(37, \"label\");\n      i0.ɵɵtext(38, \"Confirm Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(39, \"input\", 18);\n      i0.ɵɵtemplate(40, AppComponent_small_40_Template, 2, 0, \"small\", 19);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(41, \"div\", 20)(42, \"div\", 6)(43, \"label\");\n      i0.ɵɵtext(44, \"City\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(45, \"input\", 21);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"div\", 6)(47, \"label\");\n      i0.ɵɵtext(48, \"State\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(49, \"input\", 22);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(50, \"div\", 6)(51, \"label\");\n      i0.ɵɵtext(52, \"Postal Code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(53, \"input\", 23);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(54, \"button\", 24);\n      i0.ɵɵtext(55, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(56, \"br\");\n      i0.ɵɵelementStart(57, \"button\", 25);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_57_listener() {\n        return ctx.OnLoad();\n      });\n      i0.ɵɵtext(58, \" Load Api Data \");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"formGroup\", ctx.registrationForm);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(13, 13, ctx.registrationForm.value), \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵclassProp(\"is-invalid\", ctx.UserName.invalid && ctx.UserName.touched);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.UserName.invalid && ctx.UserName.touched);\n      i0.ɵɵadvance(6);\n      i0.ɵɵclassProp(\"is-invalid\", ctx.Email.invalid && ctx.Email.touched);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"d-none\", ctx.Email.untouched || ctx.Email.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.alterEmails.controls);\n      i0.ɵɵadvance(12);\n      i0.ɵɵclassProp(\"is-invalid\", ctx.registrationForm.errors == null ? null : ctx.registrationForm.errors[\"misMatch\"]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.registrationForm.errors == null ? null : ctx.registrationForm.errors[\"misMatch\"]);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.CheckboxControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName, i3.JsonPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","forbiddenNameValidator","PasswordValidator","i0","AppComponent","constructor","fb","_registrationService","UserName","registrationForm","controls","Email","alterEmails","addAlternateEmail","push","control","ngOnInit","group","userName","required","minLength","email","subscribe","password","confirmPassword","address","city","state","postCode","alternateEmails","array","validator","valueChanges","checkedValue","setValidators","clearValidators","updateValueAndValidity","OnLoad","setValue","OnSubmit","register","value","response","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Tech_Training\\Angular - Training\\Angular_Youtube_Reactive\\src\\app\\app.component.ts","C:\\Tech_Training\\Angular - Training\\Angular_Youtube_Reactive\\src\\app\\app.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\n// import { FormGroup, FormControl } from '@angular/forms';\r\n// import { FormGroup } from '@angular/forms';\r\nimport { FormBuilder , Validators, FormArray} from '@angular/forms';\r\nimport { forbiddenNameValidator } from './shared/user-name.validator';\r\nimport { PasswordValidator } from './shared/password.validator';\r\nimport { RegistrationService } from './registration.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n  constructor(private fb : FormBuilder, private _registrationService: RegistrationService){};\r\n \r\n  registrationForm : any;\r\n  \r\n  get UserName(){\r\n    return this.registrationForm.controls['userName'];\r\n  }\r\n\r\n  get Email(){\r\n    return this.registrationForm.controls['email'];\r\n  }\r\n\r\n  get alterEmails(){\r\n    return this.registrationForm.controls['alternateEmails']  ;\r\n  }\r\n\r\n  \r\n  addAlternateEmail() {\r\n    this.alterEmails.push(this.fb.control(''));\r\n  }\r\n\r\n  ngOnInit(){\r\n    this.registrationForm = this.fb.group({\r\n      userName: [\"\", [Validators.required,Validators.minLength(3),forbiddenNameValidator(/admin/)]],\r\n      email: \"\",\r\n      subscribe: [false],\r\n      password: [\"\"],\r\n      confirmPassword: [\"\"],\r\n      address: this.fb.group({\r\n        city: [\"\"],\r\n        state: [\"\"],\r\n        postCode: [\"\"]\r\n      }),\r\n      alternateEmails: this.fb.array([])\r\n   },{validator : PasswordValidator})\r\n\r\n   this.registrationForm.controls['subscribe'].valueChanges.subscribe((checkedValue : any) => {\r\n      const email = this.registrationForm.controls['email'];\r\n      if(checkedValue){\r\n        email.setValidators(Validators.required);\r\n      }\r\n      else{\r\n        email.clearValidators();\r\n      }\r\n      email.updateValueAndValidity();\r\n    });\r\n  }\r\n\r\n   \r\n\r\n//     registrationForm = new FormGroup(\r\n//       {\r\n//         userName: new FormControl(\"\"),\r\n//         password: new FormControl(\"\"),\r\n//         confirmPassword: new FormControl(\"\"),\r\n//         address: new FormGroup({\r\n//           city: new FormControl(\"\"),\r\n//           state: new FormControl(\"\"),\r\n//           postCode: new FormControl(\"\")\r\n//         })\r\n//       }\r\n//     )\r\n\r\n    OnLoad(){\r\n      this.registrationForm.setValue({\r\n        userName: \"rutvik\",\r\n        email: \"\",\r\n        subscribe: [false],\r\n        password: \"test\",\r\n        confirmPassword: \"test\",\r\n        address: {\r\n          city: \"Ahmedabad\",\r\n          state: \"gujrat\",\r\n          postCode: \"380026\",\r\n\r\n      }\r\n    })\r\n}\r\n\r\n OnSubmit(){\r\n     this._registrationService.register(this.registrationForm.value)\r\n     .subscribe(\r\n      response \r\n     )\r\n }\r\n}\r\n","<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n    <div class=\"container-fluid\">\r\n      <h2>Registration Form</h2>\r\n      <form [formGroup]=\"registrationForm\" (ngSubmit)= \"OnSubmit()\">\r\n        {{ registrationForm.value | json }}\r\n\r\n        <div class=\"form-group\">\r\n          <label>Username</label>\r\n          <input\r\n            [class.is-invalid]=\"\r\n            UserName.invalid &&\r\n              UserName.touched\r\n            \"\r\n            formControlName=\"userName\"\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n          />\r\n        </div>\r\n\r\n        <div\r\n          *ngIf=\"\r\n            UserName.invalid &&\r\n            UserName.touched\r\n          \"\r\n          class=\"text-danger mb-3\"\r\n        >\r\n          <small *ngIf=\"UserName.errors?.['required']\"\r\n            >UserName is required</small\r\n          >\r\n          <small\r\n            *ngIf=\"UserName.errors?.['minlength']\"\r\n          >\r\n            UserName must be at least 3 characters</small\r\n          >\r\n          <small *ngIf = \"UserName.errors?.['forbiddenName']\">\r\n            {{UserName.errors?.['forbiddenName'].value}} UserName is not allowed\r\n          </small>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label>Email</label>\r\n          <button type=\"button\" class=\"btn btn-secondary btn-sm m-2\" (click)=\"addAlternateEmail()\">Add e-mail</button>\r\n          <input type=\"email\"  [class.is-invalid] = \"Email.invalid && Email.touched\"  formControlName=\"email\" class=\"form-control\">\r\n          <small [class.d-none] = \"Email.untouched || Email.valid\" class=\"text-danger\">Please Enter Email</small>\r\n          <div  formArrayName=\"alternateEmails\" *ngFor = \"let email of alterEmails.controls; let i = index\" >\r\n            <input type=\"email\" class=\"form-control\" [formControlName] = \"i\">\r\n          </div>\r\n        </div>\r\n        <div class=\"form-check\">\r\n          <label class=\"form-check-label\">\r\n            Send me promotional offers\r\n          </label>\r\n          <input type=\"checkbox\" class=\"form-check-input\" formControlName=\"subscribe\">\r\n        </div>\r\n\r\n        <div class=\"form-group mb-3\">\r\n          <label>Password</label> \r\n          <input\r\n            formControlName=\"password\"\r\n            type=\"password\"\r\n            class=\"form-control\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"form-group mb-3\">\r\n          <label>Confirm Password</label>\r\n          <input\r\n            formControlName=\"confirmPassword\"\r\n            type=\"password\"\r\n            class=\"form-control\"\r\n            [class.is-invalid] = \"registrationForm.errors?.['misMatch']\"\r\n          />\r\n          <small *ngIf = \"registrationForm.errors?.['misMatch']\" class=\"text-danger\">Password do not match</small>\r\n        </div>\r\n\r\n        <div formGroupName=\"address\" class=\"mb-3\">\r\n          <div class=\"form-group\">\r\n            <label>City</label>\r\n            <input formControlName=\"city\" type=\"text\" class=\"form-control\" />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>State</label>\r\n            <input formControlName=\"state\" type=\"text\" class=\"form-control\" />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>Postal Code</label>\r\n            <input\r\n              formControlName=\"postCode\"\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <button class=\"btn btn-primary mb-3\" type=\"submit\">Register</button\r\n        ><br />\r\n        <button class=\"btn btn-info\" type=\"button\" (click)=\"OnLoad()\">\r\n          Load Api Data\r\n        </button>\r\n      </form>\r\n    </div>\r\n  </body>\r\n</html>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}