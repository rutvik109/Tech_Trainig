{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n// import { FormGroup, FormControl } from '@angular/forms';\n// import { FormGroup } from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { forbiddenNameValidator } from './shared/user-name.validator';\nimport { PasswordValidator } from './shared/password.validator';\nlet AppComponent = class AppComponent {\n  constructor(fb) {\n    this.fb = fb;\n  }\n  get UserName() {\n    return this.registrationForm.controls['userName'];\n  }\n  get Email() {\n    return this.registrationForm.controls['email'];\n  }\n  ngOnInit() {\n    this.registrationForm = this.fb.group({\n      userName: [\"\", [Validators.required, Validators.minLength(3), forbiddenNameValidator(/admin/)]],\n      email: \"\",\n      subscribe: [false],\n      password: [\"\"],\n      confirmPassword: [\"\"],\n      address: this.fb.group({\n        city: [\"\"],\n        state: [\"\"],\n        postCode: [\"\"]\n      })\n    }, {\n      validator: PasswordValidator\n    });\n    this.registrationForm.controls['subscribe'].valueChanges.subscribe(checkedValue => {\n      const email = this.registrationForm.controls['email'];\n      if (checkedValue) {\n        email.setValidators(Validators.required);\n      } else {\n        email.clearValidators();\n      }\n      email.updateValueAndValidity();\n    });\n  }\n  //     registrationForm = new FormGroup(\n  //       {\n  //         userName: new FormControl(\"\"),\n  //         password: new FormControl(\"\"),\n  //         confirmPassword: new FormControl(\"\"),\n  //         address: new FormGroup({\n  //           city: new FormControl(\"\"),\n  //           state: new FormControl(\"\"),\n  //           postCode: new FormControl(\"\")\n  //         })\n  //       }\n  //     )\n  OnLoad() {\n    this.registrationForm.setValue({\n      userName: \"rutvik\",\n      email: \"\",\n      subscribe: [false],\n      password: \"test\",\n      confirmPassword: \"test\",\n      address: {\n        city: \"Ahmedabad\",\n        state: \"gujrat\",\n        postCode: \"380026\"\n      }\n    });\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC;AACA;AACA,SAAuBC,UAAU,QAAQ,gBAAgB;AACzD,SAASC,sBAAsB,QAAQ,8BAA8B;AACrE,SAASC,iBAAiB,QAAQ,6BAA6B;AAOxD,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAEvBC,YAAoBC,EAAgB;IAAhB,OAAE,GAAFA,EAAE;EAAgB;EAKtC,IAAIC,QAAQ;IACV,OAAO,IAAI,CAACC,gBAAgB,CAACC,QAAQ,CAAC,UAAU,CAAC;EACnD;EAEA,IAAIC,KAAK;IACP,OAAO,IAAI,CAACF,gBAAgB,CAACC,QAAQ,CAAC,OAAO,CAAC;EAChD;EAEAE,QAAQ;IACN,IAAI,CAACH,gBAAgB,GAAG,IAAI,CAACF,EAAE,CAACM,KAAK,CAAC;MACpCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACa,QAAQ,EAACb,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,EAACb,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC;MAC7Fc,KAAK,EAAE,EAAE;MACTC,SAAS,EAAE,CAAC,KAAK,CAAC;MAClBC,QAAQ,EAAE,CAAC,EAAE,CAAC;MACdC,eAAe,EAAE,CAAC,EAAE,CAAC;MACrBC,OAAO,EAAE,IAAI,CAACd,EAAE,CAACM,KAAK,CAAC;QACrBS,IAAI,EAAE,CAAC,EAAE,CAAC;QACVC,KAAK,EAAE,CAAC,EAAE,CAAC;QACXC,QAAQ,EAAE,CAAC,EAAE;OACd;KACH,EAAC;MAACC,SAAS,EAAGrB;IAAiB,CAAC,CAAC;IAElC,IAAI,CAACK,gBAAgB,CAACC,QAAQ,CAAC,WAAW,CAAC,CAACgB,YAAY,CAACR,SAAS,CAAES,YAAkB,IAAI;MACvF,MAAMV,KAAK,GAAG,IAAI,CAACR,gBAAgB,CAACC,QAAQ,CAAC,OAAO,CAAC;MACrD,IAAGiB,YAAY,EAAC;QACdV,KAAK,CAACW,aAAa,CAAC1B,UAAU,CAACa,QAAQ,CAAC;OACzC,MACG;QACFE,KAAK,CAACY,eAAe,EAAE;;MAEzBZ,KAAK,CAACa,sBAAsB,EAAE;IAChC,CAAC,CAAC;EACJ;EAIF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEIC,MAAM;IACJ,IAAI,CAACtB,gBAAgB,CAACuB,QAAQ,CAAC;MAC7BlB,QAAQ,EAAE,QAAQ;MAClBG,KAAK,EAAE,EAAE;MACTC,SAAS,EAAE,CAAC,KAAK,CAAC;MAClBC,QAAQ,EAAE,MAAM;MAChBC,eAAe,EAAE,MAAM;MACvBC,OAAO,EAAE;QACPC,IAAI,EAAE,WAAW;QACjBC,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE;;KAGf,CAAC;EACN;CACC;AAvEYnB,YAAY,eALxBJ,SAAS,CAAC;EACTgC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,GACW9B,YAAY,CAuExB;SAvEYA,YAAY","names":["Component","Validators","forbiddenNameValidator","PasswordValidator","AppComponent","constructor","fb","UserName","registrationForm","controls","Email","ngOnInit","group","userName","required","minLength","email","subscribe","password","confirmPassword","address","city","state","postCode","validator","valueChanges","checkedValue","setValidators","clearValidators","updateValueAndValidity","OnLoad","setValue","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Tech_Training\\Angular - Training\\Angular_Youtube_Reactive\\src\\app\\app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n// import { FormGroup, FormControl } from '@angular/forms';\r\n// import { FormGroup } from '@angular/forms';\r\nimport { FormBuilder , Validators } from '@angular/forms';\r\nimport { forbiddenNameValidator } from './shared/user-name.validator';\r\nimport { PasswordValidator } from './shared/password.validator';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n  constructor(private fb : FormBuilder){};\r\n \r\n  registrationForm : any;\r\n  \r\n\r\n  get UserName(){\r\n    return this.registrationForm.controls['userName'];\r\n  }\r\n\r\n  get Email(){\r\n    return this.registrationForm.controls['email'];\r\n  }\r\n\r\n  ngOnInit(){\r\n    this.registrationForm = this.fb.group({\r\n      userName: [\"\", [Validators.required,Validators.minLength(3),forbiddenNameValidator(/admin/)]],\r\n      email: \"\",\r\n      subscribe: [false],\r\n      password: [\"\"],\r\n      confirmPassword: [\"\"],\r\n      address: this.fb.group({\r\n        city: [\"\"],\r\n        state: [\"\"],\r\n        postCode: [\"\"]\r\n      })\r\n   },{validator : PasswordValidator})\r\n\r\n   this.registrationForm.controls['subscribe'].valueChanges.subscribe((checkedValue : any) => {\r\n      const email = this.registrationForm.controls['email'];\r\n      if(checkedValue){\r\n        email.setValidators(Validators.required);\r\n      }\r\n      else{\r\n        email.clearValidators();\r\n      }\r\n      email.updateValueAndValidity();\r\n    });\r\n  }\r\n\r\n   \r\n\r\n//     registrationForm = new FormGroup(\r\n//       {\r\n//         userName: new FormControl(\"\"),\r\n//         password: new FormControl(\"\"),\r\n//         confirmPassword: new FormControl(\"\"),\r\n//         address: new FormGroup({\r\n//           city: new FormControl(\"\"),\r\n//           state: new FormControl(\"\"),\r\n//           postCode: new FormControl(\"\")\r\n//         })\r\n//       }\r\n//     )\r\n\r\n    OnLoad(){\r\n      this.registrationForm.setValue({\r\n        userName: \"rutvik\",\r\n        email: \"\",\r\n        subscribe: [false],\r\n        password: \"test\",\r\n        confirmPassword: \"test\",\r\n        address: {\r\n          city: \"Ahmedabad\",\r\n          state: \"gujrat\",\r\n          postCode: \"380026\",\r\n\r\n      }\r\n    })\r\n}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}