{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nlet TestComponent = class TestComponent {\n  constructor() {\n    // Properties\n    // interpolation\n    this.name = \"rutvik\";\n    // property binding\n    this.myid = \"myID-test\";\n    this.isDisabled = false;\n    // class binding\n    this.component_class = \"text-danger\";\n    this.hasError = true;\n    this.messageClass = {\n      \"text-danger\": this.hasError,\n      \"text-special\": !this.hasError\n    };\n    // style binding\n    this.text_color = \"red\";\n    this.messageStyle = {\n      color: 'red',\n      fontStyle: \"italic\"\n    };\n    // event binding \n    // Use of $event variable to get all the information about event\n    // without using event Handler\n    this.buttonClick = \" \";\n    // Two Way Binding - ngModel\n    this.mname = \" \";\n    // ngIf Directive\n    this.displayName = false;\n    // ngSwitch\n    this.swichName = \"white\";\n    // ngFor\n    this.colors = [\"red\", \"blue\", \"green\", \"white\"];\n    //Pipes\n    this.pname = \"rutvik\";\n    this.childEvent = new EventEmitter();\n  }\n  // functions\n  // interpolation\n  getName() {\n    return \"Name via function is\" + \" \" + this.name;\n  }\n  // event binding\n  Onclick() {\n    console.log(\"button clicked\");\n    this.buttonClick = \"data will be added on click into property\";\n  }\n  // Use of $event variable to get all the information about event\n  OnClick(event) {\n    console.log(event);\n    this.buttonClick = event.type;\n  }\n  // Template Reference Variables \n  // used to easily access DOM elements and property \n  template(value) {\n    console.log(value);\n  }\n  // send Data from child to Parent_to_Childe\n  // Output Decorator \n  OnFire() {\n    this.childEvent.emit(\"Data from child to Parent\");\n  }\n};\n__decorate([Input()], TestComponent.prototype, \"Parent_to_Childe\", void 0);\n__decorate([Output()], TestComponent.prototype, \"childEvent\", void 0);\nTestComponent = __decorate([Component({\n  selector: 'app-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.css']\n})], TestComponent);\nexport { TestComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,KAAK,EAAEC,MAAM,QAAQ,eAAe;AAQ/D,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAAnBC;IAEP;IAEA;IAEO,SAAI,GAAG,QAAQ;IAEtB;IAEO,SAAI,GAAG,WAAW;IAElB,eAAU,GAAG,KAAK;IAEzB;IAEO,oBAAe,GAAG,aAAa;IAE/B,aAAQ,GAAG,IAAI;IAEf,iBAAY,GAAG;MACpB,aAAa,EAAG,IAAI,CAACC,QAAQ;MAC7B,cAAc,EAAG,CAAC,IAAI,CAACA;KACxB;IAED;IAEO,eAAU,GAAG,KAAK;IAElB,iBAAY,GAAG;MACpBC,KAAK,EAAC,KAAK;MACXC,SAAS,EAAG;KACb;IAED;IAEA;IAEA;IAEO,gBAAW,GAAG,GAAG;IAExB;IAEO,UAAK,GAAG,GAAG;IAElB;IAEO,gBAAW,GAAG,KAAK;IAE1B;IAEO,cAAS,GAAG,OAAO;IAE1B;IAEO,WAAM,GAAG,CAAC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,OAAO,CAAC;IAE9C;IAEO,UAAK,GAAG,QAAQ;IAUN,eAAU,GAAG,IAAIP,YAAY,EAAE;EAgDhD;EA3CA;EAGA;EAEAQ,OAAO;IACL,OAAO,sBAAsB,GAAG,GAAG,GAAE,IAAI,CAACC,IAAI;EAChD;EAEA;EAEAC,OAAO;IACLC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7B,IAAI,CAACC,WAAW,GAAG,2CAA2C;EAChE;EAGA;EAEAC,OAAO,CAAEC,KAAW;IAClBJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IAClB,IAAI,CAACF,WAAW,GAAGE,KAAK,CAACC,IAAI;EAC/B;EAEA;EACA;EAEAC,QAAQ,CAACC,KAAU;IACjBP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC;EACpB;EAGA;EACA;EAGAC,MAAM;IACJ,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC,2BAA2B,CAAC;EACnD;CAKC;AAlDQC,YAARrB,KAAK,EAAE,uDAA+B;AAE7BqB,YAATpB,MAAM,EAAE,iDAAwC;AAtEpCC,aAAa,eALzBJ,SAAS,CAAC;EACTwB,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACWtB,aAAa,CAsHzB;SAtHYA,aAAa","names":["Component","EventEmitter","Input","Output","TestComponent","constructor","hasError","color","fontStyle","getName","name","Onclick","console","log","buttonClick","OnClick","event","type","template","value","OnFire","childEvent","emit","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Tech_Training\\Angular - Training\\Angular_Youtube\\src\\app\\test\\test.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n\n@Component({\n  selector: 'app-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.css']\n})\nexport class TestComponent {\n\n// Properties\n\n// interpolation\n\npublic name = \"rutvik\";\n\n// property binding\n\npublic myid = \"myID-test\";\n\npublic isDisabled = false;\n\n// class binding\n\npublic component_class = \"text-danger\";\n\npublic hasError = true;\n\npublic messageClass = {\n  \"text-danger\" : this.hasError,\n  \"text-special\" : !this.hasError\n};\n\n// style binding\n\npublic text_color = \"red\";\n\npublic messageStyle = {\n  color:'red',\n  fontStyle : \"italic\"\n}\n\n// event binding \n\n// Use of $event variable to get all the information about event\n\n// without using event Handler\n\npublic buttonClick = \" \"; \n\n// Two Way Binding - ngModel\n\npublic mname = \" \";\n\n// ngIf Directive\n\npublic displayName = false;\n\n// ngSwitch\n\npublic swichName = \"white\";\n\n// ngFor\n\npublic colors = [\"red\",\"blue\",\"green\",\"white\"];\n\n//Pipes\n\npublic pname = \"rutvik\";\n\n\n\n\n\n// input and output decorators\n\n@Input() public Parent_to_Childe : any;\n\n@Output() public childEvent = new EventEmitter();\n\n\n\n\n// functions\n\n\n// interpolation\n\ngetName (){\n  return \"Name via function is\" + \" \" +this.name;\n}\n\n// event binding\n\nOnclick (){\n  console.log(\"button clicked\");\n  this.buttonClick = \"data will be added on click into property\";\n}\n\n\n// Use of $event variable to get all the information about event\n\nOnClick (event : any){\n  console.log(event);\n  this.buttonClick = event.type;\n}\n\n// Template Reference Variables \n// used to easily access DOM elements and property \n\ntemplate(value: any){\n  console.log(value);\n}\n\n\n// send Data from child to Parent_to_Childe\n// Output Decorator \n\n\nOnFire(){\n  this.childEvent.emit(\"Data from child to Parent\");\n}\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}